name: Issue Check
on:
    issues: 
        types: opened
jobs:
    issue_check:
        runs-on: ubuntu-latest
        steps:
            - run: |
                echo "Found issue ${{ github.event.issue.number }}"

                gh issue comment ${{ github.event.issue.html_url }} --body "Your issue will be processed shortly"

                TITLE=$(echo "$JSON" | jq -r '.name')
                AUTHOR=$(echo "$JSON" | jq -r '.author')
                DESCRIPTION=$(echo "$JSON" | jq -r '.author')
                VERSION=$(echo "$JSON" | jq -r '.author')
                METADATA=$(echo "$JSON" | jq -r '.metadata')

                if "$TITLE" = "null" || "$AUTHOR" = "null" || "$METADATA" = "null" || "$DESCRIPTION" = "null" || "$VERSION" = "null"
                then
                    gh issue comment ${{ github.event.issue.html_url }} --body "Missing metadata attributes"
                    gh issue close ${{ github.event.issue.html_url }}
                    exit 
                fi

                if jq -e . >/dev/null 2>&1 <<< "$METADATA"
                then
                    FILE_NAME="$AUTHOR.$TITLE.json"
                    ENCODED_DATA=$(echo "$JSON" | base64 -w0)
                    FULL_FILE_PATH="repos/${{ github.repository }}/contents/themes/$FILE_NAME"
                    FULL_THEMES_PATH="repos/${{ github.repository }}/contents/themes.json"
                    MESSAGE='{"message":"New Theme","content":"'$ENCODED_DATA'","branch":"${{ github.ref_name }}"}'

                    echo hi
                    gh issue comment ${{ github.event.issue.html_url }} --body "
                    METADATA RETRIEVED!
                    TITLE: $TITLE
                    DESCRIPTION: $DESCRIPTION
                    AUTHOR: $AUTHOR
                    VERSION: $VERSION
                    CREATING FILE IN THEMES FOLDER CALLED $FILE_NAME ($FULL_FILE_PATH)"
                    
                    echo $MESSAGE
                
                    # Get the SHA hash of the existing file
                    SHA=$(gh api "$FULL_THEMES_PATH" | jq -r '.sha')

                    echo "SHA: $SHA" 

                    THEMES_ARRAY=$(curl "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/themes.json")
                    THEMES_LEN=$(echo $THEMES_ARRAY | jq '. |length')
                    echo "LENGTH OF ARRAY THEMES IS $THEMES_LEN"

                    while (( THEMES_LEN != 0 ))
                    do 
                        ((THEMES_LEN--))
                        THEME_JSON=$(echo $THEMES_ARRAY | jq -r '.['$THEMES_LEN']')

                        THEME_TITLE=$(echo "$THEME_JSON" | jq -r '.name')
                        THEME_AUTHOR=$(echo "$THEME_JSON" | jq -r '.author')

                        echo "CHECKING $THEME_TITLE AGAINST $TITLE AND $THEME_AUTHOR AGAINST $AUTHOR"
                        if "$THEME_TITLE" = "$TITLE" && "$AUTHOR" = "$THEME_AUTHOR"
                        then
                            gh issue comment ${{ github.event.issue.html_url }} --body "Another theme of yours exists with the same metadata..."
                            gh issue close ${{ github.event.issue.html_url }}
                            exit
                        fi
                    done

                    UPDATED_THEMES_ARRAY=$(echo $THEMES_ARRAY | jq '. += '"[$JSON]"'')
                    ENCONDED_THEMES_DATA=$(echo "$UPDATED_THEMES_ARRAY" | base64 -w0)

                    echo "Encoded: $ENCONDED_THEMES_DATA"

                    THEMES_MESSAGE=$(printf '{"sha":"%s","content":"%s","message":"New Theme","branch":"${{ github.ref_name }}"}' "$SHA" "$ENCONDED_THEMES_DATA")

                    echo $THEMES_MESSAGE

                    gh api --method PUT "$FULL_THEMES_PATH" \
                        --header "Accept: application/vnd.github.v3+json" \
                        --input <(echo $THEMES_MESSAGE)

                    gh api --method PUT "$FULL_FILE_PATH" \
                        --header "Accept: application/vnd.github.v3+json" \
                        --input <(echo $MESSAGE)

                    gh issue comment ${{ github.event.issue.html_url }} --body "CREATED! CLOSING ISSUE"
                    gh issue close ${{ github.event.issue.html_url }}
                else
                    gh issue comment ${{ github.event.issue.html_url }} --body "Invalid JSON metadata"
                    gh issue close ${{ github.event.issue.html_url }}
                    exit
                fi

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    JSON: ${{ github.event.issue.body }}